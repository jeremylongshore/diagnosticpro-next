name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0' # Weekly security scan

env:
  NODE_VERSION: '20'

jobs:
  quality-gates:
    name: Code Quality Gates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:js

      - name: Run Stylelint
        run: npm run lint:css

      - name: Check formatting
        run: npm run format:check

      - name: Type check
        run: npm run check

      - name: Check bundle size
        run: |
          npm run build
          echo "Bundle size report:"
          du -sh build/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: Run tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            npm test -- --grep="unit"
          elif [ "${{ matrix.test-type }}" = "integration" ]; then
            npm test -- --grep="integration"
          else
            npm run test:e2e
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results/

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/

  lighthouse:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: ./lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test]
    if:
      github.ref == 'refs/heads/develop' || (github.event_name == 'pull_request' && github.base_ref
      == 'main')
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/diagnostic-pro-staging:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/diagnostic-pro-staging:${{ github.sha }}

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy diagnostic-pro-staging \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/diagnostic-pro-staging:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=staging"

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://diagnostic-pro-staging-[hash].a.run.app/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, lighthouse]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/diagnostic-pro:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/diagnostic-pro:${{ github.sha }}

      - name: Deploy to Cloud Run (Production)
        run: |
          gcloud run deploy diagnostic-pro \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/diagnostic-pro:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --min-instances=1 \
            --max-instances=100

      - name: Health check
        run: |
          sleep 30
          curl -f https://diagnostic-pro-[hash].a.run.app/health || exit 1

      - name: Tag release
        run: |
          git tag "v$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
          git push origin --tags

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Get previous revision
        id: previous
        run: |
          PREVIOUS=$(gcloud run revisions list --service=diagnostic-pro --region=us-central1 --format="value(metadata.name)" --limit=2 | tail -1)
          echo "revision=$PREVIOUS" >> $GITHUB_OUTPUT

      - name: Rollback to previous revision
        run: |
          gcloud run services update-traffic diagnostic-pro \
            --to-revisions=${{ steps.previous.outputs.revision }}=100 \
            --region=us-central1
