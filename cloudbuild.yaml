steps:
  # Build optimized Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'gcr.io/$PROJECT_ID/diagnosticpro-frontend:latest',
        '-f',
        'Dockerfile.optimized',
        '.',
      ]

  # Push to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/diagnosticpro-frontend:latest']

  # Deploy to Cloud Run with cost optimizations
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'diagnosticpro-mvp'
      - '--image'
      - 'gcr.io/$PROJECT_ID/diagnosticpro-frontend:latest'
      - '--region'
      - 'us-central1' # Cheapest region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--memory'
      - '512Mi' # Reduced memory = 50% cost savings
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0' # Scale to zero = pay only when used
      - '--max-instances'
      - '3' # Prevent runaway costs
      - '--concurrency'
      - '80' # Higher concurrency = fewer instances
      - '--timeout'
      - '300' # 5 minutes max
      - '--set-env-vars'
      - 'NODE_ENV=production'

  # Deployment complete - health check can be done separately

# Production deployment configuration

options:
  # Use faster, cheaper machine type
  machineType: 'E2_HIGHCPU_8'

  # Enable build caching
  env:
    - 'DOCKER_BUILDKIT=1'

images:
  - 'gcr.io/$PROJECT_ID/diagnosticpro-frontend:latest'

# Build timeout (prevent long-running expensive builds)
timeout: '1200s'
