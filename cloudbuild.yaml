steps:
  # Build optimized Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build', 
      '-t', 'gcr.io/$PROJECT_ID/diagnosticpro-frontend:$COMMIT_SHA',
      '-f', 'Dockerfile.optimized',
      '.'
    ]

  # Push to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/diagnosticpro-frontend:$COMMIT_SHA']

  # Deploy to Cloud Run with cost optimizations
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'diagnosticpro-frontend'
      - '--image'
      - 'gcr.io/$PROJECT_ID/diagnosticpro-frontend:$COMMIT_SHA'
      - '--region'
      - 'us-central1'          # Cheapest region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '3000'
      - '--memory'
      - '512Mi'                # Reduced memory = 50% cost savings
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'                    # Scale to zero = pay only when used
      - '--max-instances'
      - '3'                    # Prevent runaway costs
      - '--concurrency'
      - '80'                   # Higher concurrency = fewer instances
      - '--timeout'
      - '300'                  # 5 minutes max
      - '--set-env-vars'
      - 'NODE_ENV=production'

  # Health check after deployment
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        sleep 30
        SERVICE_URL=$(gcloud run services describe diagnosticpro-frontend --region=us-central1 --format="value(status.url)")
        curl -f $SERVICE_URL/health || exit 1

# Substitute variables for each project
substitutions:
  _SERVICE_NAME: 'diagnosticpro-frontend'

options:
  # Use faster, cheaper machine type
  machineType: 'E2_HIGHCPU_8'
  
  # Enable build caching
  env:
    - 'DOCKER_BUILDKIT=1'

images:
  - 'gcr.io/$PROJECT_ID/diagnosticpro-frontend:$COMMIT_SHA'

# Build timeout (prevent long-running expensive builds)
timeout: '1200s'